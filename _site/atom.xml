<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Welcome to the bundle</title>
 <link href="http://welcometothebundle.com/atom.xml" rel="self"/>
 <link href="http://welcometothebundle.com"/>
 <updated>2013-09-11T16:29:12+02:00</updated>
 <id>http://welcometothebundle.com</id>
 <author>
   <name>liuggio</name>
   <email>liuggio@liuggio</email>
 </author>

 
 <entry>
   <title>Design by contract behaviour</title>
   <link href="http://welcometothebundle.com/design-by-contract-behaviour"/>
   <updated>2013-09-11T00:00:00+02:00</updated>
   <id>http://welcometothebundle.com/design-by-contract-behaviour</id>
   <content type="html">&lt;p&gt;In recent years, Composer has given a breath of freshness to the dependencies, and framework such as Symfony2 make best practices and decoupling their pride.&lt;/p&gt;

&lt;p&gt;The union of these two phenomena has made that especially in recent years has been used more and more the type hinting in order to have contracts with &lt;code&gt;Interfaces&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='the_problem'&gt;The problem&lt;/h2&gt;

&lt;p&gt;The problem comes when a library uses a functionality of a third library, but do not want to hard-code the third-part library.&lt;/p&gt;

&lt;h2 id='case_study'&gt;Case Study&lt;/h2&gt;

&lt;p&gt;I have a library that uses a logger:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace MyLib\Service;
class MyService
   private $log;
   public function __construct($log)
   {
     this-&amp;gt;log = $log;
   }

   public function doSomethig()
   {
      $this-&amp;gt;log-&amp;gt;info(&amp;#39;log this&amp;#39;);
   }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I&amp;#8217;m a good boy so I want to use an interface, I need an interface because I want the log type hinting because I&amp;#8217;ll use that log dependency with &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then I add the type-hinting LoggerInterface, but which namespace to use? I can&amp;#8217;t define mine LoggerInterface, so use the monolog one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace MyLib\Service;
use Monolog\LoggerInterface;
class MyService
   private $log;
   public function __construct(LoggerInterface $log)
   {
     this-&amp;gt;log = $log;
   }

   public function doSomethig()
   {
      $this-&amp;gt;log-&amp;gt;info(&amp;#39;log this&amp;#39;);
   }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By doing this I have hardcoded a &lt;strong&gt;dependency&lt;/strong&gt; to Monolog.&lt;/p&gt;

&lt;p&gt;And what happen when I&amp;#8217;ll find a better logger library that has got the same LoggerInterface and the function &amp;#8216;info&amp;#8217;? I&amp;#8217;ve to change the namespace to the new LoggerInterface or the type hinting would fail, because the control for the type hinting is also on the namespace of the interface and not on the behaviour.&lt;/p&gt;

&lt;h2 id='solution'&gt;Solution?&lt;/h2&gt;

&lt;p&gt;Monolog had fixed this problem by putting a shared interface inside PSR http://www.php-fig.org/ repository, but not all cases can be put in the php-fig.&lt;/p&gt;

&lt;p&gt;One solution would be to permit the alias for namespaces.&lt;/p&gt;

&lt;p&gt;Another &lt;code&gt;naive&lt;/code&gt; solution would be modify the &lt;code&gt;php-internal&lt;/code&gt; of how type hinting works, maybe you could define the interface with a keyword &lt;code&gt;behaviour&lt;/code&gt; that forces the engine to check that the type that you pass has the behavior (functions) and not forcing the namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace MyLib;
Behaviour Interface LoggerInterface
{
    public function info($string);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='why'&gt;Why?&lt;/h2&gt;

&lt;p&gt;Can you imagine a world where the libraries are decoupled but they respects the interfaces without sharing file but sharing &lt;code&gt;behaviour&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id='phpfig'&gt;PHP-fig&lt;/h2&gt;

&lt;p&gt;PHP-fig is a great tool but it&amp;#8217;s democratic and democracy on internet is not always able to satisfy the minorities, and to be competitive with the times.&lt;/p&gt;

&lt;h2 id='another_example'&gt;Another example&lt;/h2&gt;

&lt;p&gt;Another example, if you want to use this library http://yohan.giarel.li/Finite/index.html, you have to put a dependency with Finite\StatefulInterface only because your class has to have the functions &lt;code&gt;getFiniteState&lt;/code&gt; and &lt;code&gt;setFiniteState&lt;/code&gt;, this is good and it works but hard-coding namespaces and dependencies is not the best option.&lt;/p&gt;

&lt;h2 id='what_do_you_think_about_it'&gt;What do you think about it?&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>Doctrine2 tracking policy</title>
   <link href="http://welcometothebundle.com/doctrine2-tracking-policy"/>
   <updated>2013-04-23T00:00:00+02:00</updated>
   <id>http://welcometothebundle.com/doctrine2-tracking-policy</id>
   <content type="html">&lt;h1 id='which_tracking_policy_are_you_using'&gt;Which tracking policy are you using?&lt;/h1&gt;

&lt;p&gt;With doctrine you can change the tracking policy for each entity, the tracking policy is the way in which Doctrine understands if a entity property must be &amp;#8216;saved&amp;#8217; in the database.&lt;/p&gt;

&lt;p&gt;Doctrine definition: &amp;#8220;Change tracking is the process of determining what has changed in managed entities since the last time they were synchronized with the database.&amp;#8221;&lt;/p&gt;

&lt;p&gt;There are 3 tracking policies: Implicit, Explicit, Nofity.&lt;/p&gt;

&lt;h2 id='implicit_tracking_the_default_one'&gt;Implicit tracking (the default one)&lt;/h2&gt;

&lt;p&gt;The implicit is the default one and the slowest, you don&amp;#8217;t need to explicit call &amp;#8216;persist&amp;#8217; eg.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; // $entity is not a new object, and has $entity-&amp;gt;Title = &amp;#39;liuggio loves tvision.github.io&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; $entity-&amp;gt;setTitle(&amp;#39;liuggio loves symfony2&amp;#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; $entityManager-&amp;gt;flush();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; echo $entity-&amp;gt;getTitle();   // output &amp;#39;liuggio loves symfony2&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unit of work now has &lt;strong&gt;$entity.title=liuggio loves symfony2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Database has flushed without persist &lt;strong&gt;$entity.title=liuggio loves symfony2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro&lt;/strong&gt;: &lt;code&gt;$entityManager-&amp;gt;persist($entity)&lt;/code&gt; is not necessary&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: Slowness, Doctrine has to check property-by-property for all the object in the unit of work&lt;/p&gt;

&lt;h2 id='the_explicit_tracking_the_suggested_one'&gt;The explicit tracking (the suggested one)&lt;/h2&gt;

&lt;p&gt;You have to explicit flag which object you want to persist, than Doctrine will check property-by-property in order to find with property has changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Faster than implicit, must if you have a lot of entities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: the object in the unit of work could be different from that one in the db, not easy to debug.&lt;/p&gt;

&lt;p&gt;The example&lt;/p&gt;

&lt;p&gt;&lt;code&gt; // $entity is not a new object, and has $entity-&amp;gt;Title = &amp;#39;liuggio loves tvision.github.io&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; $entity-&amp;gt;setTitle(&amp;#39;liuggio loves symfony2&amp;#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; $entityManager-&amp;gt;flush();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; echo $entity-&amp;gt;getTitle();   // output &amp;#39;liuggio loves symfony2&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unit of work now has &lt;strong&gt;$entity.title=liuggio loves symfony2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Database has different state for that entity &lt;strong&gt;liuggio loves tvision.github.io&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='notify_tracking'&gt;Notify tracking&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s not really a tracking policy, if you want to develop your own tracking policy, you have the tool for doing it.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t understimate this policy useful if you a domain logic.&lt;/p&gt;

&lt;h2 id='link_to_doctrine_doc'&gt;Link to doctrine doc&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://docs.doctrine-project.org/en/latest/reference/change-tracking-policies.html'&gt;doctrine/change-tracking-policies&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The meaning of Cache for a web developer no more too many connection</title>
   <link href="http://welcometothebundle.com/the-meaning-of-cache-for-a-web-developer-no-more-too-many-connection"/>
   <updated>2013-02-22T00:00:00+01:00</updated>
   <id>http://welcometothebundle.com/the-meaning-of-cache-for-a-web-developer-no-more-too-many-connection</id>
   <content type="html">&lt;p&gt;In the place of Mr. Obvious I&amp;#8217;m going to describe what really cache means, there is a lot of confusion between what the cache &lt;strong&gt;is&lt;/strong&gt;, what it &lt;strong&gt;does&lt;/strong&gt; and all the possible &lt;strong&gt;uses&lt;/strong&gt; and &lt;strong&gt;implementations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All the fuss comes from the use&lt;strong&gt;s&lt;/strong&gt; of that polysemous word.&lt;/p&gt;

&lt;h2 id='definition'&gt;Definition:&lt;/h2&gt;

&lt;p&gt;We should start from &lt;strong&gt;Wikipedia&lt;/strong&gt;, “Cache is a component that transparently stores data so that future requests for that data can be served faster.”&lt;/p&gt;

&lt;p&gt;So instead of doing a time consuming calculation if you already &amp;#8216;remember&amp;#8217; the result answer it.&lt;/p&gt;

&lt;p&gt;The concept seems simple, the problem is it could be used in a myriad of ways.&lt;/p&gt;

&lt;p&gt;Important words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Cache Hit&lt;/strong&gt; happens if the Cache contains the answer.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Cache Miss&lt;/strong&gt; happens if the Cache doesn’t contain the answer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='some_standard_code'&gt;Some &amp;#8216;standard&amp;#8217; Code:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Doctrine&lt;/strong&gt; defines the cache interface with &lt;a href='https://github.com/doctrine/cache/blob/master/lib/Doctrine/Common/Cache/Cache.php'&gt;Doctrine/Common/Cache/Cache.php&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function fetch($id);
function contains($id);
function save($id, $data, $lifeTime = 0);
function delete($id);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PHP fig-standards&lt;/strong&gt; proposed the cache with &lt;a href='https://github.com/php-fig/fig-standards/issues?labels=Cache&amp;amp;page=1&amp;amp;state=open'&gt;proposed/PSR-Cache.md&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='implementations'&gt;Implementations:&lt;/h2&gt;

&lt;p&gt;As web developers the cache is an essential tool, we have to divide the cache features from its implementations.&lt;/p&gt;

&lt;h3 id='1_http_cache'&gt;1. HTTP Cache&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;OK - describing the HTTP Cache is a huge task, and heaps of great developers already did this (&lt;a href='https://www.google.com/search?q=http+cache'&gt;google&lt;/a&gt;, &lt;a href='http://www.slideshare.net/fabpot/caching-on-the-edge'&gt;fabpot/caching-on-the-edge&lt;/a&gt;), the concept in few lines is that you are a web developer, and the web works with the HTTP Protocol, so you HAVE to study the HTTP Protocol.&lt;/p&gt;

&lt;p&gt;I won&amp;#8217;t go in depth with HTTP Protocol and Cache, but understanding the HTTP protocol turns a developer in a web developer.&lt;/p&gt;

&lt;p&gt;The actors in the HTTP Cache are: your web-server, your reverse proxy (as Varnish or Squid), the Shared cache server&lt;strong&gt;s&lt;/strong&gt; (more than one) and the client browser cache.&lt;/p&gt;

&lt;p&gt;This is the best Cache and the most powerful, you could create many cache layers on your application, but if you set up the HTTP headers properly the first time, the next requests will be served for free. &lt;strong&gt;The least expensive query is the query you never had&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id='enemies'&gt;Enemies&lt;/h4&gt;

&lt;p&gt;An enemy of your mental health is the &lt;strong&gt;invalidation&lt;/strong&gt;, do not waste time trying to find a solutions for invalidating cache, choose only the best validation.&lt;/p&gt;

&lt;p&gt;The HTTP cache enemy? Cookies and Sessions (see how to solve it thanks to &lt;a href='https://www.google.it/search?client=ubuntu&amp;amp;channel=fs&amp;amp;q=ESI+cache&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;redir_esc=&amp;amp;ei=P6QnUbS5AsbKtAbdQQ'&gt;ESI&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;Varnish / Squid&lt;/p&gt;

&lt;h3 id='2_opcode'&gt;2. Opcode&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;“APC is a performance-enhancing extension. It should not be confused with a magic pill, although having it around does provide a positive impact on performance! If configured incorrectly, APC can cause unexpected behaviour, however when implemented optimally APC can be a useful weapon in your arsenal.” &lt;a href='http://techportal.inviqa.com/2010/10/07/understanding-apc/'&gt;read more on understanding APC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This should be a must for you my dear PHP developer.&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;APC o Zend Optimizer+.&lt;/p&gt;

&lt;h3 id='3_the_cache_of_your_application__framework'&gt;3. The Cache of your application / framework&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;The framework is a tool that should helps you sort and easily create the logic of your domain, to do this it provides files and configurators, which are usually elaborated in PHP files, the cache is used to not process at each request.&lt;/p&gt;

&lt;p&gt;For example with Symfony2 in the application cache folders you will find, Url creator files, Proxy Classes, Configuration files (ini, yml, xml) converted to PHP files, Annotations etc&amp;#8230;&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;Configuration file to PHP then any Opcode.&lt;/p&gt;

&lt;h3 id='4_template_and_file_system_caching'&gt;4. Template and File System Caching&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;Good Template engines, Smarty and Twig provide a caching system using precompiled pieces of code already in a file into the file system.&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;There is no better cache then the Opcode for serving this type of file.&lt;/p&gt;

&lt;p&gt;Recently a Pull Request has also been refused, it allows Twig to use any other type of cache &lt;a href='https://github.com/fabpot/Twig/issues/728'&gt;issue on github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='5_query_results'&gt;5. Query Results&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;You are Object Oriented programmers, do not waste your time normalizing the database, if you have too many JOIN delegated the speed to the cache layer.&lt;/p&gt;

&lt;p&gt;Queries can be large objects, better to put a centralized server, The enemy is the period of validity vs. freshness, and the size of the query.&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;Redis/Memcache(d), but &lt;a href='http://www.slideshare.net/uptimeforce/postgresql-query-cache-pqc'&gt;PostgreSQL-cache&lt;/a&gt; has a great internal cache layer, also MySQL has it.&lt;/p&gt;

&lt;h3 id='6_query_caching'&gt;6. Query Caching&lt;/h3&gt;

&lt;h4 id='description'&gt;Description&lt;/h4&gt;

&lt;p&gt;Some ORM as Doctrine stores the query creation in order to not process it twice.&lt;/p&gt;

&lt;h4 id='best_tools'&gt;Best Tools&lt;/h4&gt;

&lt;p&gt;APC or Redis/Memcache(d)&lt;/p&gt;

&lt;h2 id='simple_rules'&gt;Simple Rules&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you want to not process content of ini files or xml files or yml files, you could convert to PHP or you could store data see &lt;strong&gt;3.&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;If you want to cache PHP files use Opcode caching.&lt;/li&gt;

&lt;li&gt;If you want to store variable contents or Objects use Redis, Memcache(d), or you could also use APC &lt;a href='http://php.net/manual/en/function.apc-store.php'&gt;apc-store&lt;/a&gt; (suggested if you have a single web server)&lt;/li&gt;

&lt;li&gt;If you have provide some content use HTTP Cache always and in order to serve assets (file css, js, static content) use some famous CDN or Nginx or some free/cheap cdn service on the net.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='other_cache_mechanisms'&gt;Other Cache mechanisms&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pre-Caching/Cacheback, sometimes you need to have some data already available and you don&amp;#8217;t want that the first request wait some slow task &lt;a href='http://codeinthehole.com/writing/cacheback-asynchronous-cache-refreshing-for-django'&gt;cacheback-asynchronous-cache-refreshing-for-django&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.howtoforge.com/why-you-should-always-use-nginx-with-microcaching'&gt;Microcaching&lt;/a&gt;, few seconds of cache, useful for GET or &lt;strong&gt;POST&lt;/strong&gt;. I said &lt;strong&gt;POST&lt;/strong&gt;, do not it seemed strange to you? If you jumped on the chair is ok, POST on cache is insane, unless you do not want to avoid double click.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Before there were static website in HTML, then dynamic languages ​​and databases, and we finally came to the static pages again, this blog has been developed with &lt;a href='http://jekyllbootstrap.com/lessons/jekyll-introduction.html'&gt;jekyll&lt;/a&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>PHPUnit vs PHPSpec: theory on Behaviour Driven Development 1/3</title>
   <link href="http://welcometothebundle.com/phpunit-vs-phpspec-theory-on-behaviour-driven-development"/>
   <updated>2013-01-05T00:00:00+01:00</updated>
   <id>http://welcometothebundle.com/phpunit-vs-phpspec-theory-on-behaviour-driven-development</id>
   <content type="html">&lt;p&gt;The first part of a series of short articles (maybe three) where I&amp;#8217;d like to share my tiny experience with BDD and in particular with PHPSpec.&lt;/p&gt;

&lt;h2 id='phpunit_vs_phpspec_a_word_on_behaviour_testing'&gt;PHPUnit vs &lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt;: A word on behaviour testing&lt;/h2&gt;

&lt;p&gt;I recently discovered that there is an alternative to PHPUnit, and I really like this new approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; But why an alternative if PHPUnit does everything I need?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; What could be changed is the way of doing test,&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;ve ever worked in TDD, you know it&amp;#8217;s very time consuming&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create - create or modify the test&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;fail - see it fail&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;pass - code the minimum to get the test passed&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;refactor - Refactoring&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;go to step 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='the_differences_in_a_sentence'&gt;The differences in a sentence&lt;/h2&gt;

&lt;p&gt;If the story is a key of the development, the behaviour is the differrence between TDD and BDD.&lt;/p&gt;

&lt;p&gt;If you need to test the insertion of an object into a collection and the collection is represented by an Array, with xUnit you should assert that the collection contains the object in the Array, but if the collection will change to another type of container, graph for example, the xUnit will fail, even if the behaviour is unchanged. In BDD you are not testing you are describing what that classes will do, and so you can continue creating the class (PHPSpec will create the class and the methods for you)&lt;/p&gt;

&lt;h2 id='bdd'&gt;BDD&lt;/h2&gt;

&lt;p&gt;There are several BDD frameworks on PHP depending on what you want to test.&lt;/p&gt;

&lt;h4 id='external_behaviour'&gt;External behaviour&lt;/h4&gt;

&lt;p&gt;&lt;a href='http://behat.org/'&gt;Behat&lt;/a&gt; deals to have specifications that reflects the environment from the outside.&lt;/p&gt;

&lt;h4 id='internal_behaviour'&gt;Internal behaviour&lt;/h4&gt;

&lt;p&gt;&lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt; responds to the behaviour in the lower level, from the internal of the classes.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt; is considered a tool that helps you to develop.&lt;/p&gt;

&lt;h2 id='summary'&gt;Summary&lt;/h2&gt;

&lt;p&gt;The BDD tests what the object does instead of what it is, and what it does is much more important.&lt;/p&gt;

&lt;p&gt;We have to say that Ruby community helped a lot the evolution of BDD, RSpec is a standard-de-facto, in Ruby world.&lt;/p&gt;

&lt;h2 id='faq'&gt;FAQ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; When I should use PHPUnit and when to use &lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; There isn&amp;#8217;t a better way between the two, depending on how you want to approach the problem, if you want to follow the behaviour or a unit test the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; With PHPUnit I could do the same things as I could do with &lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Absolutely, in fact there is a mapping between the two&lt;/p&gt;

&lt;p&gt;• Assertion Becomes expectation.&lt;/p&gt;

&lt;p&gt;• Test method Becomes code example&lt;/p&gt;

&lt;p&gt;• Test case example Becomes group&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; You would be distracted by the code loosing focus on the result, and you might miss the concept of behaviour. [EDITED 07-01-2013 thanks to &lt;a href='http://twitter.com/euxpom'&gt;euxpom &lt;img src='http://gravatar.com/avatar/77014411a56fa9c746d6a89b7fd96121?size=20' alt='exupom' /&gt;&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id='phpspec_advantages'&gt;&lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt; advantages&lt;/h2&gt;

&lt;p&gt;xSpec is context specific, expectation, the output is the documentation and it is for this reason that the language is used because the same syntax you guide you to focus in behaviour, and the importance of documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/phpspec run -f prettify -v&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the big change is on how you write test code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the next post I will show some examples on how you could use &lt;a href='https://github.com/phpspec/phpspec2'&gt;PHPSpec&lt;/a&gt; to test some (in)famous design pattern.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='bibliography'&gt;Bibliography&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://pragprog.com/book/achbd/the-rspec-book'&gt;The RSpec Book Behaviour-Driven Development with RSpec, Cucumber, and Friends&lt;/a&gt; by David Chelimsky, Dave Astels, Zach Dennis, Aslak Hellesøy, Bryan Helmkamp, Dan North&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Test Driven Development. By Example di Kent Beck (dic. 2002)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>Automate Test and Code Inspection in PHP with Guard, and Symfony2</title>
   <link href="http://welcometothebundle.com/automate-test-and-code-inspection-in-php-with-guard-and-symfony2"/>
   <updated>2013-01-03T00:00:00+01:00</updated>
   <id>http://welcometothebundle.com/automate-test-and-code-inspection-in-php-with-guard-and-symfony2</id>
   <content type="html">&lt;h2 id='hey_phper_do_you_automate_your_test'&gt;Hey PHPer do you automate your test?&lt;/h2&gt;

&lt;p&gt;In everyday life there are tools that can not only speed, but also lighten the workload of your mind, in that regard I wanted to share a useful library: &lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='_guard'&gt;&lt;code&gt;Watch&lt;/code&gt; Guard!&lt;/h2&gt;

&lt;p&gt;&lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt; is written in Ruby, it automates commands based on events that happen in the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt; in a short time has become popular especially in the automate testing.&lt;/p&gt;

&lt;p&gt;You can easily edit your files, having only the front window of your editor/IDE, each change will run the test, and you will be notified.&lt;/p&gt;

&lt;p&gt;Indeed during these years of development, especially in PHP I overstimulated shortcuts, I have become a slave of the keyboard, &lt;strong&gt;Alt-Tab&lt;/strong&gt;, &lt;strong&gt;Key-Up + Enter&lt;/strong&gt; for example, are a must for TDD programmers .&lt;/p&gt;

&lt;p&gt;For years I had the &lt;strong&gt;CTRL+S&lt;/strong&gt; tic, in fact in my life I have saved (by mistake) around 2000 pages browsing with Firefox.&lt;/p&gt;

&lt;p&gt;Before finding out &lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt;, I was using a crude one-line script, it runs each 3 seconds PHPUnit if error otherwise waits 10 seconds&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while true; do clear; phpunit; if [ ! $? ]; then sleep 10; else sleep 3;fi; done;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but it was not enough, I needed something which could perform only the Test for the file that I had changed: &lt;a href='https://github.com/Maher4Ever/guard-phpunit'&gt;guard-phpunit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the PHP world, &lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt; is not so popular but instead would require much more importance.&lt;/p&gt;

&lt;h2 id='install_guardphpunit'&gt;&lt;strong&gt;Install&lt;/strong&gt; &lt;a href='https://github.com/Maher4Ever/guard-phpunit'&gt;guard-phpunit&lt;/a&gt;!&lt;/h2&gt;

&lt;p&gt;Simply follow the instructions of the README.md https://github.com/Maher4Ever/guard-phpunit&lt;/p&gt;

&lt;h3 id='1_install_guardphpunit'&gt;1 Install guard-phpunit&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gem install guard-phpunit&lt;/code&gt;&lt;/p&gt;

&lt;h3 id='2_step_create_a_'&gt;2 Step create a &lt;code&gt;Guardfile&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;guard &amp;#39;phpunit&amp;#39;, :tests_path =&amp;gt; &amp;#39;Tests&amp;#39;, :cli =&amp;gt; &amp;#39;--colors&amp;#39; do
 # Watch tests files
 watch(%r{^.+Test\.php$})
 # Watch library files and run their tests
 watch(%r{^Object/(.+)\.php}) { |m| &amp;quot;Tests/#{m[1]}Test.php&amp;quot; }
end&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='3_run_with_'&gt;3 Run with &lt;code&gt;guard&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;liuggio@liuggio:/var/repos/StatsDClientBundle$ guard
20:33:21 - INFO - Guard uses NotifySend to send notifications.
20:33:21 - INFO - Guard uses TerminalTitle to send notifications.
20:33:21 - INFO - Running all tests
20:33:23 - INFO - ..................
&amp;gt; [#51616B16C20E]
&amp;gt; [#51616B16C20E] Finished in 2 seconds
&amp;gt; [#51616B16C20E] 18 tests, 43 assertions
20:33:23 - INFO - Guard is now watching at &amp;#39;/var/www/StatsDClientBundle&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will test the entire library for you, any changes will test only the files that have changed&lt;/p&gt;

&lt;p&gt;If you install &lt;code&gt;libnotify&lt;/code&gt; with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gem install libnotify&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you will have an Icon next your top panel&lt;/p&gt;

&lt;p&gt;&lt;img src='http://welcometothebundle.com/assets/themes/readable-liuggio/img/guard-phpunit-sf2.png' alt='liuggio-guard-phpunit-sf2-notifier' /&gt;&lt;/p&gt;

&lt;h3 id='4_trick_guard_on_large_directories'&gt;4 Trick Guard on large directories&lt;/h3&gt;

&lt;p&gt;If you have big project you need to increase the amount of watches of libnotify&lt;/p&gt;

&lt;p&gt;see this page for more info: https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers&lt;/p&gt;

&lt;h2 id='_guard'&gt;&lt;code&gt;Inspect&lt;/code&gt; Guard!&lt;/h2&gt;

&lt;p&gt;Another plugin that I suggest is Guard for code inspection:&lt;/p&gt;

&lt;p&gt;is easy to install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pear install PHP_CodeSniffer
sudo gem install guard-phpcs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then add to your Guardfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guard &amp;#39;phpunit&amp;#39;, :tests_path =&amp;gt; &amp;#39;Tests&amp;#39;, :cli =&amp;gt; &amp;#39;--colors&amp;#39; do
 # Watch tests files
 watch(%r{^.+Test\.php$})
 # Watch library files and run their tests
 watch(%r{^/(.+)/(.+)/(.+)\.php}) { |m| &amp;quot;Test/#{m[1]}/#{m[2]}/#{m[3]}Test.php&amp;quot; }
end
guard &amp;#39;phpcs&amp;#39;, :standard =&amp;gt; &amp;#39;PSR1&amp;#39; do
    watch(%r{.*\.php$})
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will detect all the camel case problems, and you will have to follow the standard PSR1 :D&lt;/p&gt;

&lt;h2 id='guard____guardphpunitsf2'&gt;Guard + &lt;code&gt;Symfony2&lt;/code&gt; = &lt;a href='https://github.com/liuggio/guard-phpunit-sf2'&gt;guard-phpunit-sf2&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Unfortunately &lt;code&gt;guard-phpunit&lt;/code&gt; does not work with symfony2 framework,&lt;/p&gt;

&lt;p&gt;so I forked that repo and I made &lt;a href='https://github.com/liuggio/guard-phpunit-sf2'&gt;guard-phpunit-sf2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hurray!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;guard-phpunit-sf2 has not been pushed on RubyGems. If you want to try it, clone the repository, build the gem and install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:liuggio/guard-phpunit-sf2.git
cd guard-phpunit-sf2
gem build guard-phpunit-sf2.gemspec
sudo gem instal guard-phpunit-sf2-0.1.4.gem&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then create the Guardfile into the root of your Symfony2 project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guard &amp;#39;phpunit&amp;#39;, :cli =&amp;gt; &amp;#39;--colors -c app/&amp;#39; do
     # Watch tests files
     watch(%r{^src\/.+Test\.php$})

     # Watch src file and run its test,
     # Test string: src/Tvision/Bundle/CartBundle/Repository/CartRepository.php
     watch(%r{^src\/(.+)\/(.+)Bundle\/(.+)\.php$}) { |m| &amp;quot;src/#{m[1]}/#{m[2]}Bundle/Tests/#{m[3]}Test.php&amp;quot; } # Watch all files in your bundles and run the respective tests on change
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then lunch &lt;code&gt;guard&lt;/code&gt; and start testing.&lt;/p&gt;

&lt;p&gt;PS: maybe you should uninstall guard-phpunit in order to work with symfony2 :|&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo gem uninstall guard-phpunit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Happy test to everybody.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ServerGrove StastdClientBundle Interesting Symfony Bundles</title>
   <link href="http://welcometothebundle.com/servergrove-stastdclientbundle-interesting-symfony-bundles"/>
   <updated>2012-11-01T06:01:25+01:00</updated>
   <id>http://welcometothebundle.com/servergrove-stastdclientbundle-interesting-symfony-bundles</id>
   <content type="html">&lt;p&gt;I was contacted by &lt;a href='https://twitter.com/_leopro_'&gt;leopro&lt;/a&gt; &lt;img src='https://en.gravatar.com/avatar/26d90e88b1eb694cc1276b9ab8d7630f?s=30' alt='leopro' /&gt; who congratulated me for the excellent results obtained with the &lt;a href='https://github.com/liuggio/StatsDClientBundle'&gt;StatsDClientBundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to this comment I now know that &lt;a href='http://blog.servergrove.com/2012/10/09/interesting-symfony-bundles-statsdclientbundle/'&gt;ServerGrove&lt;/a&gt; chosen &lt;a href='https://github.com/liuggio/StatsDClientBundle'&gt;StatsD Client Bundle&lt;/a&gt; as its top choice for Symfony2 project among more than 1600.&lt;/p&gt;

&lt;p&gt;cite&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are well over 1600 public bundles at knpbundles.com, so sometimes really interesting and good bundles are hard time find. So we will revive the old series but this time we will do it with bundles.
In our first installment of the series we will present StatsDClientBundle written by Giulio De Donato. `&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyone who follows a conference in europe about web developing or PHP knows &lt;a href='http://blog.servergrove.com/2012/10/09/interesting-symfony-bundles-statsdclientbundle/'&gt;ServerGrove&lt;/a&gt;, I thank them.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://blog.servergrove.com/2012/10/09/interesting-symfony-bundles-statsdclientbundle/'&gt;continue reading Interesting Symfony Bundles: StatsDClientBundle on ServerGrove&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Symfony Day 5 October, Turin 2012</title>
   <link href="http://welcometothebundle.com/symfony-day-5-october-turin-2012"/>
   <updated>2012-10-31T23:01:25+01:00</updated>
   <id>http://welcometothebundle.com/symfony-day-5-october-turin-2012</id>
   <content type="html">&lt;p&gt;On October 5th, I was the speaker at the symfony day, and I was lucky enough to be able to close the conference.&lt;/p&gt;

&lt;p&gt;It was a very interesting experience, although excited I talked about what I know best: &lt;strong&gt;improving the performance of a web application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.slideshare.net/liuggio/rationally-boost-your-symfony2-application-with-caching-tips-and-monitoring'&gt;liuggio/rationally-boost-your-symfony2-application-with-caching-tips-and-monitoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[edit] Two months after the talk, visitors pass the 1,200 visits (December 2012).&lt;/p&gt;

&lt;p&gt;There were a lot of other interesting topics:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symfony2 Security Layer&lt;/strong&gt; - by @K3A, explained in detail the most difficult part of the symfony documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHPUnit raised by Symfony2&lt;/strong&gt; of @euxpom, showed how many utensils you have for free by the Symfony2 framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symfony CMF&lt;/strong&gt; of @jacoporomei described with an overwhelming sympathy a subject very dear to me the CMF and his architecture.&lt;/p&gt;

&lt;p&gt;See you next year &lt;a href='http://www.symfonyday.it'&gt;symfonyday.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a special thanks @cirpo&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>2013-Software Team Manifesto</title>
   <link href="http://welcometothebundle.com/tvision-team-manifesto"/>
   <updated>2012-09-16T16:09:12+02:00</updated>
   <id>http://welcometothebundle.com/tvision-team-manifesto</id>
   <content type="html">&lt;h2 id='abstract'&gt;Abstract&lt;/h2&gt;

&lt;p&gt;In the chaos of the implicit, a programmer who joins a team must have a common language and some rules in order to have an integration without friction.&lt;/p&gt;

&lt;p&gt;There is a level 0, a common and accepted (or imposed by the architect) knowledge.&lt;/p&gt;

&lt;p&gt;This document defines the concepts and guidelines to follow in order to be a developer who can work in a software team in 2013.&lt;/p&gt;

&lt;p&gt;I think that you are already proficient with this notions.&lt;/p&gt;

&lt;p&gt;We use PHP as language and Symofony2 as framework.&lt;/p&gt;
&lt;script src='https://gist.github.com/4339207.js'&gt; &lt;/script&gt;
&lt;p&gt;Any comment or help is really appreciated,&lt;/p&gt;

&lt;p&gt;please help me to improve this document forking this &lt;a href='https://gist.github.com/4339207'&gt;gist&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Easily install statsd and graphite with vagrant</title>
   <link href="http://welcometothebundle.com/easily-install-statsd-and-graphite-with-vagrant"/>
   <updated>2012-07-31T00:00:00+02:00</updated>
   <id>http://welcometothebundle.com/easily-install-statsd-and-graphite-with-vagrant</id>
   <content type="html">&lt;p&gt;If Engineering at Tvision has a religion, it’s the Church of Graphs. If it moves, we track it.&lt;/p&gt;

&lt;p&gt;Ops I already heard this sentence, please read carefully this blog post &lt;a href='http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/'&gt;measure-anything-measure-everything&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For your production env sure you need statsd, you do will want to use it.&lt;/p&gt;

&lt;p&gt;If your salary is paid by a website, you need to &lt;strong&gt;monitor and react&lt;/strong&gt;, you need a monitor that pushes the informations.&lt;/p&gt;

&lt;h2 id='install_statsd__graphite__carbon__whisper__linuxos__apache__python__django__mod_wsgi_'&gt;Install Statsd + Graphite + Carbon + Whisper + LinuxOS + apache + python + django + mod_wsgi &amp;#8230;&lt;/h2&gt;

&lt;p&gt;The first time I spent 3 hours installing Graphite, now with vagrant you could try Statsd+Graphite in few minutes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install vagrant&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gem install vagrant&lt;/code&gt; (if you need see the official documentation)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Installing the world with &lt;a href='http://vagrantup.com/'&gt;vagrant&lt;/a&gt; is so easy&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/liuggio/vagrant-statsd-graphite-puppet.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd vagrant-statsd-graphite-puppet.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My repo is just a fork of &lt;code&gt;Jimdo/vagrant-statsd-graphite-puppet&lt;/code&gt; with a small bug fix&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Say &amp;#8216;WOOOW&amp;#8217; then connect to&lt;/p&gt;

&lt;p&gt;graphite: http://localhost:8080/&lt;/p&gt;

&lt;p&gt;statsd: 8125:udp&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Everything is done, your virtual box with StatsD is ready to use, if you are a developer and you like web application YOU MUST use a web framework, if you are a php developer you SHOULD use Symfony2, if you use Symfony2 you should have a look to &lt;a href='https://github.com/liuggio/StatsDClientBundle'&gt;symfony2 liuggio StatsDClientBundle&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Symfony2 assets on RackSpace Cloud files</title>
   <link href="http://welcometothebundle.com/symfony2-assets-on-rackspace-cloud-files"/>
   <updated>2012-05-06T00:00:00+02:00</updated>
   <id>http://welcometothebundle.com/symfony2-assets-on-rackspace-cloud-files</id>
   <content type="html">&lt;p&gt;How to use assetic on rackspace with symfony2?&lt;/p&gt;

&lt;p&gt;The problem is how to move the static files to the cloud files and get them from twig?&lt;/p&gt;

&lt;p&gt;Following some tips from the forum &lt;a href='http://groups.google.com/group/symfony2/browse_thread/thread/8e14c145683981d4'&gt;Registering (s3) stream wrapper for AsseticBundle – Symfony2 | Google Gruppi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created this bundle &lt;a href='https://github.com/liuggio/RackspaceCloudFilesBundle'&gt;RackspaceCloudFilesBundle&lt;/a&gt; that handles the static files easily&lt;/p&gt;

&lt;h2 id='installing'&gt;Installing&lt;/h2&gt;

&lt;h3 id='step_1'&gt;Step 1&lt;/h3&gt;

&lt;p&gt;follow the README into the &lt;a href='https://github.com/liuggio/RackspaceCloudFilesBundle
'&gt;RackspaceCloudFilesBundle&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='step_2'&gt;Step 2&lt;/h3&gt;

&lt;p&gt;modify the app/config/config.yml and the app/parameters.ini&lt;/p&gt;
&lt;script src='https://gist.github.com/2420800.js'&gt; &lt;/script&gt;
&lt;h3 id='step_3'&gt;Step 3&lt;/h3&gt;

&lt;p&gt;when you will deploy a new image just run app/console assetic:dump –env=prod&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PLEASE FELL FREE TO CLONE AND SEND PULL REQUEST!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Github or Bitbucket as Assets container for Symfony2</title>
   <link href="http://welcometothebundle.com/using-github-or-bitbucket-as-assets-container-for-symfony2"/>
   <updated>2012-04-20T00:00:00+02:00</updated>
   <id>http://welcometothebundle.com/using-github-or-bitbucket-as-assets-container-for-symfony2</id>
   <content type="html">&lt;p&gt;I made the following changes to the config, deps and autoload in order to push all the assets directly into a github repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why you should pay for CDN if you can use Github?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='theory'&gt;Theory&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;Php library&lt;/span&gt; the library teqneers/PHP-Stream-Wrapper-for-Git registers a stream and commit to a repository each file that is moved throw the stream&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;span&gt;Symfony2&lt;/span&gt; Assetic bundle compresses and streams the files in your local repository, and twig render the raw.github url&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;span&gt;Git-Hook&lt;/span&gt; The Post-Commit hook will push to remote repository automatically&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='how_to'&gt;How To&lt;/h2&gt;

&lt;p&gt;Just 3 steps&lt;/p&gt;

&lt;h2 id='step_1_install_the_library_in_your_symfony2'&gt;Step 1 Install the library in your symfony2&lt;/h2&gt;

&lt;p&gt;In your deps file add the following lines, and then run bin/vendors install&lt;/p&gt;
&lt;script src='https://gist.github.com/2427058.js?file=deps'&gt; &lt;/script&gt;
&lt;p&gt;Register namespace and register stream into &lt;code&gt;app/autoload.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‘/usr/bin/git’ is where your git binary are&lt;/p&gt;

&lt;p&gt;‘php-git’ is the name of the stream&lt;/p&gt;
&lt;script src='https://gist.github.com/2427058.js?file=app-autoload.php'&gt; &lt;/script&gt;
&lt;h2 id='step_2_github_or_bitbucket_repository'&gt;Step 2 Github or BitBucket Repository&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create Repo in the root /UsingGitHubAsAssetsCloudFiles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href='http://help.github.com/create-a-repo/'&gt;http://help.github.com/create-a-repo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the public url of the repo will be www.github.com/liuggio/UsingGitHubAsAssetsCloudFiles,&lt;/p&gt;

&lt;p&gt;your remote name is ‘origin’ and the branch is ‘master’&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the Hook into the /UsingGitHubAsAssetsCloudFiles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create a file into ‘/UsingGitHubAsAssetsCloudFiles/.git/hooks/post-commit’&lt;/p&gt;
&lt;script src='https://gist.github.com/2427058.js?file=UsingGitHubAsAssetsCloudFiles-.git-hooks-post-commit'&gt; &lt;/script&gt;
&lt;h2 id='step_3_configyml_and_assets'&gt;Step 3 Config.yml and Assets&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;modify your &lt;code&gt;app/config/config.yml&lt;/code&gt; in 2 different places&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/2427058.js?file=app-config-config.yml'&gt; &lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;dump all the file for prod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;app/console assetic:dump –env=prod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;go to your symfony2 website http://yoursymfony2.com/web/app.php/hello/{YES}&lt;/p&gt;

&lt;p&gt;THAT’S ALL.&lt;/p&gt;

&lt;p&gt;Now github is hosting your assets (for free) and your web server is happy (and if your webserver is into the cloud you’ll not charged for assets )&lt;/p&gt;</content>
 </entry>
 
 
</feed>